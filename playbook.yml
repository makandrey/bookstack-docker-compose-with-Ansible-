##################################################
# BookStack in Docker-Compose
##################################################
---
- hosts: bookstack
  become: true
  gather_facts: yes
  vars_files:
    - ansible_vars/default.yml

  tasks:
    # Install Prerequisites
    - name: Install Prerequisites
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'aptitude' ]

    # Install required system packages
    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: ['apt-transport-https', 'ca-certificates', 'curl',
      'software-properties-common', 'python3-pip', 'virtualenv',
      'python3-setuptools', 'sshpass']

    # Add Docker GPG apt Key
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    # Add Docker Repository
    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    # Update apt and install docker-ce
    - name: Update apt and install docker-ce
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'docker-ce', 'docker-compose' ]

    # Create bookstack_dir directory
    - name: Create {{ bookstack_dir }} directory
      file:
        dest: "{{ bookstack_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0775
    
    # Create mattermost_dir directory
    - name: Create {{ mattermost_dir }} directory
      file:
        dest: "{{ mattermost_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0775

    # Copy docker-compose.yml
    - name: Copy Bookstack Project Files
      copy:
        src: "./{{ item }}"
        dest: "{{ bookstack_dir }}{{ item }}"
      loop:
      - docker-compose.yml
      - nginx/

    # Copy docker-compose-mm.yml
    - name: Copy Mattermost Project Files
      copy:
        src: "./{{ item }}"
        dest: "{{ mattermost_dir }}{{ item }}"
      loop:
      - docker-compose-mm.yml
    
    # Tear down existing services
    - name: Tear down existing services (BookStack)
      community.docker.docker_compose:
        project_src: "{{ bookstack_dir }}"
        state: absent

    # Deploy Docker Compose stack
    - name: Deploy Docker Compose stack (BookStack)
      community.docker.docker_compose:
        project_src: "{{ bookstack_dir }}"
        files:
        - docker-compose.yml

    # Tear down existing services
    - name: Tear down existing services (Mattermost)
      community.docker.docker_compose:
        project_src: "{{ mattermost_dir }}"
        state: absent

    # Deploy Docker Compose stack
    - name: Deploy Docker Compose stack (Mattermost)
      community.docker.docker_compose:
        project_src: "{{ mattermost_dir }}"
        files:
        - docker-compose-mm.yml

    ##############################################################
    # UFW Configuration
    ##############################################################
    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp
    - name: "UFW - Allow SSH on port {{ ssh_port }}"
      ufw:
        rule: allow
        port: "{{ ssh_port }}"
        proto: tcp
    - name: "UFW - Allow HTTPS on port {{ https_port }}"
      ufw:
        rule: allow
        port: "{{ https_port }}"
        proto: tcp
    - name: "UFW - Allow BookStack port on {{ bookstack_port }}"
      ufw:
        rule: allow
        port: "{{ bookstack_port }}"
        proto: tcp
    - name: "UFW - Allow MatterMost port on {{ bookstack_port }}"
      ufw:
        rule: allow
        port: "{{ mattermost_port }}"
        proto: tcp
    - name: "UFW - Allow outcomming"
      ufw:
        direction: outgoing
        policy: allow
    - name: "UFW - Deny incoming"
      ufw:
        direction: incoming
        policy: deny
    # - name: "UFW - Deny routed"
    #   ufw:
    #     direction: routed
    #     policy: deny
    - name: "UFW - Enable and deny by default"
      ufw:
        state: enabled
